map_server:
    ros__parameters:
        yaml_filename: "/home/sentry111/licang_ws/src/licang/robot_bring_up/maps/test1.yaml"

#map_odom_pub_node:
#    ros__parameters:
#        global_frame_id: map
#        odom_frame_id: odom
#        initial_trans: [ 0.0, 0.0, 0.0 ] # 初始位姿
#        initial_rot: [ 0.0, 0.0, 0.0, 1.0 ] # 初始四元数

obstacle_segmentation_node:
    ros__parameters:
        input_cloud_topic: "/livox/lidar_PointCloud2"
        output_cloud_topic: "/cloud_obstacle"
        use_downsample: false # 是否使用体素滤波器
        leaf_size: 0.1 # 体素滤波器的体素大小
        point_num_for_normal: 10 # 用于计算法向量的点的数量
        angle_threshold: 0.785 # 法向量与地面夹角的角度阈值(绝对值、弧度制)
        obstacle_x_min: -10.0 # 障碍物的x最小值(livox坐标系)
        obstacle_x_max: 10.0 # 障碍物的x最大值(livox坐标系)
        obstacle_y_min: 10.0 # 障碍物的y最小值(livox坐标系)
        obstacle_y_max: 10.0 # 障碍物的y最大值(livox坐标系)
        obstacle_z_min: -0.15 # 障碍物的z最小值(livox坐标系)
        obstacle_z_max: 0.45 # 障碍物的z最大值(livox坐标系)
        obstacle_range_x_min: -0.35 # 障碍物的最小距离(livox坐标系)
        obstacle_range_x_max: 0.2 # 障碍物的最大距离(livox坐标系)
        obstacle_range_y_min: -0.4
        obstacle_range_y_max: 0.05
        point_frame: "livox"

## PCD转二维栅格地图
pcd2pgm_node:
    ros__parameters:
        pcd_path: "/home/sentry111/licang_ws/src/licang/Point-LIO_cxr/PCD" # 点云路径
        pcd_name: "warehouse.pcd"
        map_path: "/home/sentry111/licang_ws/src/licang/robot_bring_up/maps"
        map_name: "test1.png"
        yaml_name: "test1.yaml"
        method: "point" # normal、height或者point，代表不同的转换方法
        thre_x_min: -50.0 # 点云范围
        thre_x_max: 50.0 # 点云范围
        thre_y_min: -50.0 # 点云范围
        thre_y_max: 50.0 # 点云范围
        thre_z_min: -0.56 # 点云范围 point方法需要排除地面影响
        thre_z_max: 1.2 # 点云范围 point方法需要排除天花板影响
        thre_radius: 0.05 # 半径阈值，用于排除离群的点
        map_resolution: 0.05 # 地图分辨率，m
        thre_point_count: 30 # 半径内点的数量阈值，用于排除离群的点
        occupied_thresh: 0.65 # 占据阈值
        free_thresh: 0.196 # 空闲阈值
        point_num_for_normal: 50 # 用于计算法向量的点的数量
        leaf_size: 0.1 # 体素滤波器的体素大小，只与normal方法有关
        angle_threshold: 1.0 # 法向量与地面夹角的角度阈值(弧度制)，只与normal方法有关
        height_threshold: 0.05 # 高度阈值，只与height方法有关
        point_num_for_statistical: 100 # 用于统计滤波的点的数量
        standard_deviation_multiplier: 1.0 # 标准差倍数

laserMapping:
    ros__parameters:
        common:
            lid_topic:  "/livox/lidar" # 接收的雷达数据的topic，消息类型为CustomMsg
            imu_topic:  "/livox/imu" # 接收的IMU数据的topic，消息类型为sensor_msgs::Imu
            # imu_topic:  "/imu/data"
            odom_topic: "/livox/odometry" # 发布的里程计数据的topic，消息类型为nav_msgs::Odometry
            odom_frame: "map" # 里程计坐标系
            base_frame: "livox" # 机器人坐标系
            con_frame: false # true: if you need to combine several LiDAR frames into one # 是否需要将多帧点云数据合并成一帧
            con_frame_num: 1 # the number of frames combined # 合并的帧数
            cut_frame: false # true: if you need to cut one LiDAR frame into several subframes # 是否需要将一帧点云数据分割成多帧
            cut_frame_time_interval: 0.1 # should be integral fraction of 1 / LiDAR frequency # 分割的时间间隔，应该是1/LiDAR频率的整数倍
            time_diff_lidar_to_imu: 0.0 # Time offset between LiDAR and IMU calibrated by other algorithms, e.g., LI-Init (find in Readme)
              # LiDAR和IMU之间的时间偏移，由其他算法校准，例如LI-Init（在Readme中查找）TODO需要调整
              # the timesample of IMU is transferred from the current timeline to LiDAR's timeline by subtracting this value
            # IMU的时间样本通过减去该值从当前时间线转换到LiDAR的时间线

        preprocess:
            lidar_type: 1 # 1表示Livox Avia LiDAR
            scan_line: 4 # Livox MID360的扫描线数
            timestamp_unit: 3 # the unit of time/t field in the PointCloud2 rostopic: 0-second, 1-milisecond, 2-microsecond, 3-nanosecond.
              # PointCloud2 rostopic中时间戳字段的单位：0-秒，1-毫秒，2-微秒，3-纳秒。
            # 只对非Livox LiDAR起作用，Livox LiDAR采用了CustomMsg消息类型，这个设置不起作用
            blind: 0.5 # LiDAR的盲区，单位为米

        mapping:
            imu_en: true
            extrinsic_est_en: true # for aggressive motion, set this variable false
            # 对于激进运动，将此变量设置为false
            imu_time_inte: 0.005 # = 1 / frequency of IMU
            # IMU的周期
            lidar_time_inte: 0.1 # LiDAR的周期
            satu_acc: 4.0 # the saturation value of IMU's acceleration. not related to the units
            # IMU的加速度饱和值。与单位无关。TODO需要调整
            satu_gyro: 35.0 # the saturation value of IMU's angular velocity. not related to the units
            # IMU的角速度饱和值。与单位无关。TODO需要调整
            acc_norm: 1.0 # 1.0 for g as unit, 9.81 for m/s^2 as unit of the IMU's acceleration
            # IMU的加速度单位，1.0表示g，9.81表示m/s^2
            lidar_meas_cov: 0.01 # 0.001; 0.01
            # LiDAR测量噪声协方差 TODO需要调整
            acc_cov_output: 500.0 # IMU的加速度输出噪声协方差 TODO需要调整
            gyr_cov_output: 1000.00 # IMU的角速度输出噪声协方差 TODO需要调整
            b_acc_cov: 0.0001 # IMU的加速度偏置噪声协方差 TODO需要调整
            b_gyr_cov: 0.0001 # IMU的角速度偏置噪声协方差 TODO需要调整
            imu_meas_acc_cov: 0.1 #0.1 # 0.1 #
            # IMU的加速度测量噪声协方差 TODO需要调整
            imu_meas_omg_cov: 0.1 #0.01 # 0.1
            # IMU的角速度测量噪声协方差 TODO需要调整
            gyr_cov_input: 0.01 # for IMU as input model
            # IMU的角速度输入噪声协方差 TODO需要调整
            acc_cov_input: 0.1 # for IMU as input model
            # IMU的加速度输入噪声协方差 TODO需要调整
            plane_thr: 0.1 # 0.05, the threshold for plane criteria, the smaller, the flatter a plane
            # 平面判据的阈值，越小越平坦 TODO需要调整
            match_s: 81.0 # 匹配窗口的大小 TODO不清楚作用
            ivox_grid_resolution: 0.5 # 体素网格的分辨率
            gravity: [0.0, 0.0, -9.810] # [0.0, 9.810, 0.0] # gravity to be aligned
            # 要对齐的重力
            gravity_init: [0.0, 0.0, -9.810] # [0.0, 9.810, 0.0] # # preknown gravity in the first IMU body frame, use when imu_en is false or start from a non-stationary state
            # 第一个IMU坐标系中的预先知道的重力，当imu_en为false或从非静止状态开始时使用
            # extrinsic_T: [ -0.011, -0.02339, 0.04412 ] # 点云坐标系在IMU坐标系下的位置 标准位置
            extrinsic_T: [ -0.011, -0.02339, -0.04412 ] # 点云坐标系在IMU坐标系下的位置 倒装位置
            extrinsic_R: [ 1.0, 0.0, 0.0,
                           0.0, 1.0, 0.0,
                           0.0, 0.0, 1.0 ] # 点云坐标系在IMU坐标系下的旋转矩阵

        odometry:
            publish_odometry_without_downsample: false

        publish:
            path_en: false # false: close the path output
            # false：关闭路径输出
            scan_publish_en: true # false: close all the point cloud output
            # false：关闭所有点云输出
            scan_bodyframe_pub_en: false  # true: output the point cloud scans in IMU-body-frame
            # true：输出IMU坐标系下的点云

        pcd_save:
            pcd_save_en: true
            interval: 1800 # how many LiDAR frames saved in each pcd file;
              # 每个pcd文件中保存多少帧LiDAR数据
              # -1 : all frames will be saved in ONE pcd file, may lead to memory crash when having too much frames.
              # -1：所有帧都将保存在一个pcd文件中，当有太多帧时可能会导致内存崩溃。
            #测试
            #lmy
            use_pcd_map_: false
            prior_PCD_map_path: "/home/sentry111/licang_ws/src/licang/point_lio_ros2/point_lio/PCD/warehouse.pcd"
        init_pos:
            init_x: 0.0
            init_y: 0.0
            init_z: 0.0
            initial_rot: [0.0, 0.0, 0.0, 1.0]
        gcl:
            task: "B"
        #lmy

bt_navigator:
    ros__parameters:
        global_frame: map
        robot_base_frame: base_link
        odom_topic: /livox/odometry
        bt_loop_duration: 10
        default_server_timeout: 20
        # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
        # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
        # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
        # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
        plugin_lib_names:
            - nav2_keep_away_from_obstacles_action_bt_node
            - nav2_navigate_to_pose_action_bt_node
            - nav2_compute_path_to_pose_action_bt_node
            - nav2_compute_path_through_poses_action_bt_node
            - nav2_follow_path_action_bt_node
            - nav2_clear_costmap_service_bt_node
            - nav2_goal_updated_condition_bt_node
            - nav2_rate_controller_bt_node
            - nav2_recovery_node_bt_node
            - nav2_pipeline_sequence_bt_node
            - nav2_round_robin_node_bt_node
            - nav2_single_trigger_bt_node
            - nav2_remove_passed_goals_action_bt_node
            
robot_bt_decision_maker_node:
    ros__parameters:
        loop_duration_in_millisec: 100
        server_timeout_in_millisec: 1000
        transform_tolerance: 0.15
        bt_xml_filename: "/behavior_trees/paotu_test.xml"
        tree_name: ["/behavior_trees/paotu_test.xml"]
        plugin_lib_names:
            - nav2_keep_away_from_obstacles_action_bt_node
            - nav2_navigate_to_pose_action_bt_node
            - nav2_goal_reached_condition_bt_node
            - nav2_goal_updated_condition_bt_node
            - nav2_goal_updater_node_bt_node
            - nav2_user_force_success_decorator_bt_node
            - nav2_user_force_failure_decorator_bt_node
            - nav2_update_goal_action_bt_node
            - nav2_send_decision_action_bt_node
            - nav2_robot_status_action_bt_node
            - nav2_send_qrcode_action_bt_node
            - nav2_change_goal_action_bt_node
            - nav2_printf_action_bt_node
            - nav2_match_status_action_bt_node
            - nav2_if_adjust_condition_bt_node
            - nav2_if_finish_condition_bt_node
            - nav2_if_catch_ball_condition_bt_node
            - nav2_is_goal_reached_condition_bt_node
            - nav2_is_goal_update_condition_bt_node
            - nav2_if_navigation_condition_bt_node
            - nav2_if_match_finish_condition_bt_node
            - nav2_send_position_error_action_bt_node
            - nav2_receive_init_error_action_bt_node
            - nav2_set_goal_action_bt_node
robot_bt_decision_maker_node_rclcpp_node:
    ros__parameters:
        goal_reached_tol: 0.15 # 允许到目标位置的最终x和y的偏差（以米为单位），不考虑角度差

# teb控制器
controller_server:
    ros__parameters:
        odom_topic: /livox/odometry
        controller_frequency: 30.0 # 运行控制器的频率 (赫兹)。
        controller_plugin_types: ["teb_local_planner::TebLocalPlannerROS"]
        goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
        controller_plugins: ["FollowPath"]
        general_goal_checker:
            stateful: True
            plugin: "nav2_controller::SimpleGoalChecker"
            xy_goal_tolerance: 0.08
            yaw_goal_tolerance: 6.28
        FollowPath:
            plugin: teb_local_planner::TebLocalPlannerROS

            teb_autosize: 1.0
            dt_ref: 0.25 # 所需的轨迹时间分辨率
            dt_hysteresis: 0.025 # 根据当前时间分辨率自动调整大小的滞后，建议使用dt_ref的 10%
            max_samples: 500
            min_samples: 3 # 最小采样数,大于2
            global_plan_overwrite_orientation: True # 覆盖全局规划器提供的局部子目标的方向（因为它们通常仅提供 2D 路径）
            allow_init_with_backwards_motion: False
            max_global_plan_lookahead_dist: 1.55 # 指定考虑优化的全局计划子集的最大长度（累积欧几里得距离）。实际长度由本地成本图大小和该最大界限的逻辑与确定。设置为零或负数以停用此限制。
            global_plan_viapoint_sep: -0.1 # 如果为正，则从全局计划中提取途经点（路径跟踪模式）。该值确定参考路径的分辨率（沿全局规划的每两个连续经由点之间的最小间隔，如果为负值：禁用）。
            global_plan_prune_distance: 1.0
            # via_points_ordered: TDOD
            force_reinit_new_goal_dist: 1.0 # 如果之前的目标更新后的间隔超过指定值（以米为单位），则重新初始化轨迹（跳过热启动）
            # force_reinit_new_goal_angular: TODO
            # min_resolution_collision_check_angular: TODO
            # control_look_ahead_poses:  TODO
            exact_arc_length: True # 如果为 true，则规划器在速度、加速度和转弯速率计算中使用精确的弧长（-> 增加 CPU 时间），否则使用欧几里德近似。
            # feasibility_check_lookahead_distance:  TODO
            feasibility_check_no_poses: 2 # 指定每个采样间隔应检查预测计划上的哪个位姿的可行性。 2.28
            publish_feedback: False # 发布包含完整轨迹和活动障碍物列表的规划器反馈（应仅在评估或调试时启用）。

            # Robot

            max_vel_x: 0.6 # 机器人最大x轴速度m/s
            max_vel_y: 0.6 # 机器人最大y轴速度m/s
            max_vel_x_backwards: 1.0 # 机器人最大x轴后退速度m/s
            max_vel_theta: 1.0 # 机器人最大角速度rad/s
            acc_lim_x: 1.0 # 机器人最大x轴平移加速度m/s^2
            acc_lim_y: 1.0 # 机器人最大y轴平移加速度m/s^2
            acc_lim_theta: 1.0 # 机器人最大角加速度rad/s^2

            is_footprint_dynamic: False
            footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
                type: "circular"
                radius: 0.2 # for type "circular"

            # GoalTolerance

            free_goal_vel: False # 去除目标速度约束，使机器人能够以最大速度到达目标

            # Obstacles

            min_obstacle_dist: 0.01 # 机器人与障碍物之间的最小距离（以米为单位）2.28
            inflation_dist: 0.04 # 非零惩罚成本的障碍物周围的缓冲区（应大于min_obstacle_dist才能生效）。
            include_costmap_obstacles: True # 指定是否应考虑本地成本图的障碍。每个被标记为障碍物的单元格都被视为点障碍物。因此，不要选择非常小的代价图分辨率，因为它会增加计算时间。
            costmap_obstacles_behind_robot_dist: 4.0 # 限制机器人后面规划时考虑的占用的本地成本图障碍（指定距离以米为单位）。
            obstacle_poses_affected: 15 # 每个障碍物位置都附加到轨迹上最近的姿势以保持距离。还可以考虑其他邻居。
            legacy_obstacle_association: false # 如果为 true，则使用旧的障碍物关联方法，该方法将障碍物与轨迹上最近的姿势相关联。如果为 false，则使用新的障碍物关联方法，该方法将障碍物与轨迹上最近的姿势相关联，并考虑其他邻居。
            obstacle_association_force_inclusion_factor: 2.6 # 非传统障碍物关联策略尝试在优化过程中仅将相关障碍物与离散化轨迹连接起来。但指定距离内的所有障碍物都必须包含在内（作为min_obstacle_dist的倍数）。例如，选择 2.0 是为了在 2.0* min_obstacle_dist 的半径内强制考虑障碍物。 [仅当参数legacy_obstacle_association为false时才使用此参数]
            obstacle_association_cutoff_factor: 100.0 # 但超出[value]* min_obstacle_dist的倍数时，所有障碍物在优化期间都会被忽略。首先处理参数barrier_association_force_inclusion_factor 。 [仅当参数legacy_obstacle_association为false时才使用此参数]

            dynamic_obstacle_inflation_dist: 0.6
            include_dynamic_obstacles: True # 如果此参数设置为 true，则在优化过程中通过恒定速度模型来预测和考虑 非零速度障碍物的运动（通过主题~/obstacles上用户提供的障碍物提供或从costmap_converter获得）。

            costmap_converter_plugin: "costmap_converter::CostmapToPolygonsDBSMCCH"
            costmap_converter_spin_thread: True
            costmap_converter_rate: 10.0
            # obstacle_proximity_ratio_max_vel: TODO
            # obstacle_proximity_lower_bound: TODO
            # obstacle_proximity_upper_bound: TODO

            # Optimization

            no_inner_iterations: 5 # 每次外循环迭代中调用的实际求解器迭代次数。
            no_outer_iterations: 4 # 每次外循环迭代都会根据所需的时间分辨率dt_ref自动调整轨迹大小，并调用内部优化器（执行no_inner_iterations）。因此，每个规划周期中求解器迭代的总数是两个值的乘积。
            optimization_activate: True
            optimization_verbose: False
            penalty_epsilon: 0.1 # 为硬约束近似的惩罚函数添加一个小的安全裕度
            obstacle_cost_exponent: 4.0
            weight_max_vel_x: 0.5 # 满足最大允许平移速度的优化权重 2.28
            weight_max_vel_y: 0.5 # 满足最大允许平移速度的优化权重
            weight_max_vel_theta: 0.5 # 满足最大允许角速度的优化权重
            weight_acc_lim_x: 0.1 # 满足最大允许平移加速度的优化权重
            weight_acc_lim_y: 0.1 # 满足最大允许平移加速度的优化权重
            weight_acc_lim_theta: 0.5 # 满足最大允许角加速度的优化权重
            weight_kinematics_nh: 0.01 # 满足非完整运动学约束的优化权重，该参数必须很高
            weight_kinematics_forward_drive: 0.01 # 用于迫使机器人仅选择前进方向（正平移速度）的优化权重。较小的权重（例如 1.0）仍然允许向后行驶。 1000左右的值几乎可以防止向后行驶（但不能保证）。
            weight_optimaltime: 500.0 # must be > 0 用于收缩相对于转换/执行时间的轨迹的优化权重 2.28
            weight_shortest_path: 10.0
            weight_obstacle: 500.0 # 用于满足与障碍物距离的权重 2.28
            weight_inflation: 1.0 # 膨胀区域的权重 应该很小
            weight_dynamic_obstacle: 10.0 # not in use yet
            weight_dynamic_obstacle_inflation: 0.2
            weight_viapoint: 1000.0 # 用于最小化到过点（或参考路径）的距离的优化权重。
            weight_adapt_factor: 2.0 # 一些特殊权重（当前为weight_obstacle）在每次外部TEB迭代中都会按此因子重复缩放（weight_new =weight_old*factor）。迭代地增加权重而不是预先设置一个巨大的值会导致底层优化问题的更好的数值条件。
            # weight_prefer_rotdir: TODO
            # weight_velocity_obstacle_ratio: TODO

            # Homotopy Class Planner

            enable_homotopy_class_planning: True # 在独特的拓扑中激活并行规划（需要更多的 CPU 资源，因为同时优化多个轨迹）
            enable_multithreading: True # 激活多线程以便在不同线程中规划每个轨迹
            # simple_exploration: TODO
            max_number_classes: 4 # 指定考虑的独特轨迹的最大数量（限制计算量）
            selection_cost_hysteresis: 5.0 # 指定新候选者必须具有多少轨迹成本才能被选择（如果 new_cost < old_cost*factor 则选择）。
            # selection_prefer_initial_plan: 1.0 TODO
            selection_viapoint_cost_scale: 1.0 # 额外缩放经过点成本项只是为了选择“最佳”候选者。
            selection_obst_cost_scale: 1.0 # 障碍成本项的额外缩放只是为了选择“最佳”候选者。
            selection_alternative_time_cost: True # 如果为 true，则时间成本（时间差的平方和）将替换为总转换时间（时间差的总和）。

            roadmap_graph_samples: 15 # 指定为创建路线图而生成的样本数量
            roadmap_graph_area_width: 5.0 # 在起点和目标之间的矩形区域中对随机关键点/路径点进行采样。指定该区域的宽度（以米为单位）。
            # roadmap_graph_area_length_scale: 1.0 TODO
            h_signature_prescaler: 0.5 # 用于区分同伦类的尺度内部参数（H-signature ）。警告：仅减少此参数，如果您观察到局部成本图中障碍物过多的问题，请不要选择极低的值，否则无法区分障碍物（0.2<值<=1）。
            h_signature_threshold: 0.1 # 如果实部和复数部分的差值均低于指定阈值，则假定两个 H 签名相等。
            obstacle_heading_threshold: 0.45 # 指定障碍物航向和目标航向之间的标量积的值，以便在探索时将它们（障碍物）考虑在内。
            # obstacle_keypoint_offset: TODO
            switching_blocking_period: 0.0 # 指定在允许切换到新的等价类之前需要到期的持续时间（以秒为单位）。
            viapoints_all_candidates: True # 如果为真，则不同拓扑的所有轨迹都附加到一组via-point，否则只有与初始/全局计划共享相同拓扑的轨迹与它们连接（对test_optim_node没有影响）。
            # delete_detours_backwards: True
            # detours_orientation_tolerance:
            # length_start_orientation_vector:
            # selection_dropping_probability:
            # max_ratio_detours_duration_best_duration: 3.0
            visualize_hc_graph: False # 可视化为探索独特轨迹而创建的图表（检查 rviz 中的标记消息）
            # visualize_with_time_as_z_axis_scale: 0.0

            # Recovery

            shrink_horizon_backup: True
            shrink_horizon_min_duration: 10.0
            oscillation_recovery: True
            oscillation_v_eps: 0.1
            oscillation_omega_eps: 0.1
            oscillation_recovery_min_duration: 10.0
            oscillation_filter_duration: 10.0
            # divergence_detection_enable:
            # divergence_detection_max_chi_squared:

local_costmap:
    local_costmap:
        ros__parameters:
            update_frequency: 30.0
            publish_frequency: 30.0
            global_frame: map
            robot_base_frame: base_link
            rolling_window: True
            width: 8
            height: 8
            resolution: 0.05
            robot_radius: 0.05
            plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
            inflation_layer:
                plugin: "nav2_costmap_2d::InflationLayer"
                cost_scaling_factor: 2.0
                inflation_radius: 0.3
            obstacle_layer:
                plugin: "nav2_costmap_2d::ObstacleLayer"
                enabled: True
                observation_sources: scan1
                min_obstacle_height: -1.0
                max_obstacle_height: 1.0
                scan1:
                    topic: /cloud_obstacle
                    expected_update_rate: 10.0
                    max_obstacle_height: 1.0 # 障碍物最大高度
                    min_obstacle_height: -1.0 # 障碍物最小高度
                    clearing: True
                    marking: True
                    data_type: "PointCloud2"
                    raytrace_max_range: 10.0
                    raytrace_min_range: 0.0
                    obstacle_max_range: 10.0
                    obstacle_min_range: 0.0
            static_layer:
                plugin: "nav2_costmap_2d::StaticLayer"
                map_subscribe_transient_local: True
            always_send_full_costmap: True # 是否每次更新都发送完整的成本图，而不是更新。

global_costmap:
    global_costmap:
        ros__parameters:
            update_frequency: 30.0
            publish_frequency: 30.0
            global_frame: map
            robot_base_frame: base_link
            robot_radius: 0.05
            resolution: 0.05
            track_unknown_space: true
            plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
            min_obstacle_height: -1.0
            max_obstacle_height: 1.0
            obstacle_layer:
                plugin: "nav2_costmap_2d::ObstacleLayer"
                enabled: True
                observation_sources: scan
                scan:
                    topic: /cloud_obstacle
                    expected_update_rate: 10.0
                    max_obstacle_height: 1.0 # 障碍物最大高度
                    min_obstacle_height: -1.0 # 障碍物最小高度
                    clearing: True
                    marking: True
                    data_type: "PointCloud2"
                    raytrace_max_range: 10.0
                    raytrace_min_range: 0.0
                    obstacle_max_range: 10.0
                    obstacle_min_range: 0.0
            static_layer:
                plugin: "nav2_costmap_2d::StaticLayer"
                map_subscribe_transient_local: True
            inflation_layer:
                plugin: "nav2_costmap_2d::InflationLayer"
                cost_scaling_factor: 2.0
                inflation_radius: 0.3
            always_send_full_costmap: True # 是否每次更新都发送完整的成本图，而不是更新。

planner_server:
    ros__parameters:
        expected_planner_frequency: 30.0
        planner_plugins: ["GridBased"]
        GridBased:
            plugin: "nav2_navfn_planner/NavfnPlanner"
            tolerance: 0.5 # 请求的目标姿态和路径末端之间的公差 (米)。
            use_astar: false # 是否使用A*。如果错误，则使用Dijkstra的扩展。
            allow_unknown: true # 是否允许在未知空间进行规划。
            use_final_approach_orientation: true # 如果为true，则由planner产生的路径的最后姿态将其方向设置为进近方向，即连接路径最后两点的向量的方向

smoother_server:
    ros__parameters:
        smoother_plugins: ["simple_smoother"]
        simple_smoother:
            plugin: "nav2_smoother::SimpleSmoother"
            tolerance: 1.0e-10
            max_its: 1000
            do_refinement: True

behavior_server:
    ros__parameters:
        point_topic: /cloud_obstacle
        cycle_frequency: 50.0
        behavior_plugins: ["keep_away_from_obstacles"]
        robot_radius: 0.2
        keep_away_from_obstacles:
            plugin: "nav2_behaviors/KeepAwayFromObstacles"
        global_frame: map
        robot_base_frame: base_link
        transform_tolerance: 0.15

waypoint_follower:
    ros__parameters:
        loop_rate: 50
        stop_on_failure: false
        waypoint_task_executor_plugin: "wait_at_waypoint"
        wait_at_waypoint:
            plugin: "nav2_waypoint_follower::WaitAtWaypoint"
            enabled: True
            waypoint_pause_duration: 200

velocity_smoother:
    ros__parameters:
        smoothing_frequency: 50.0
        scale_velocities: False
        feedback: "OPEN_LOOP"
        max_velocity: [3.0, 3.0, 0.5]
        min_velocity: [-3.0, -3.0, -0.5]
        max_accel: [3.0, 3.0, 3.0]
        max_decel: [-3.0, -3.0, -3.0]
        odom_topic: "/livox/odometry"
        odom_duration: 0.02
        deadband_velocity: [0.0, 0.0, 0.0]
        velocity_timeout: 1.0
